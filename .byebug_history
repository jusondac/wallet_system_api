c
self
c
source_wallet.nil?
(source_wallet.nil? || target_wallet.present?)
c
self.target_wallet
self.source_wallet
self
c
transaction_type == "transfer" && (source_wallet.nil? || target_wallet.nil?)
c
Transaction
transaction_type == "transfer" && (source_wallet.nil? || target_wallet.nil?)
Transaction.create!(source_wallet_id: 19, target_wallet_id: 20, amount: 50, transaction_type: "transfer")
target_wallet.nil?
target_wallet
source_wallet
target_walllet.nil?
target_walllet.nil
source_wallet.nil?
Transaction.create!(source_wallet_id: 19, target_wallet_id: 20, amount: 50, transaction_type: "transfer")
Transaction.create(source_wallet_id: 19, target_wallet_id: 20, amount: 50, transaction_type: "transfer")
Transaction.all
target_wallet
source_wallet
c
Transaction.create(source_wallet_id: 19, target_wallet_id: 20, amount: 50, transaction_type: "transfer")
Transaction.create(source_wallet_id: 19, target_wallet_id: 20, amount: 50, transaction_type: :transfer)
Transaction.create(source_wallet_id: 19, target_wallet_id: 20, amount: 50, transaction_type: "transfer")
Transaction.create(source_wallet_id: 19, target_wallet_id: 20, amount: 50, transaction_type: transfer)
transaction.save
transaction
User.find(17).wallet.id
User.find(16).wallet.id
ap User.includes(:wallet).as_json(only:[:id, :name], include:{wallet:{only:[:id,:balance]}}).first(3)
ap User.includes(:wallet).as_json(only:[:id, :name]).first(3)
User.includes(:wallet).as_json(only:[:id, :name]).first(3)
User.includes(:wallet).as_json(only:[:id, :name])
User.includes(:wallet)
User.all
UserWallet.find(19)
transaction
params
source_wallet
transaction.save
transacton.save
transaction
c
User.includes(:wallet).as_json(
User.includes(:wallet)
User
User.joins(:wallet).pluck('users.id as user_id')
User.joins(:wallet)
User.includes(:wallet).where()
User.includes(:wallet)
user.includes(:wallet)
user
user.wallet
user
c
user.wallet.balance
user.wallet.balance.to_f
user.wallet.balance.to_i
user.wallet.balance
user.wallet
user
c
rand(100.00..200.00)
rand(100..200)
rand(100..100)
rand(100)
(1..10).to_a
(1..10)
current_user.wallet
current_user
c
auth_header.start_with?("Bearer")
auth_header.start_with("Bearer")
auth_header
c
params
c
params
c
params
user_params
params
